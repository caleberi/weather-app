// source: protocs/weather_search_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return Function("return this")();
}.call(null);

goog.exportSymbol("proto.weather.GeopointDataRequest", null, global);
goog.exportSymbol(
  "proto.weather.GeopointDataRequest.GeopointQuery",
  null,
  global
);
goog.exportSymbol("proto.weather.GeopointDataResponse", null, global);
goog.exportSymbol(
  "proto.weather.GeopointDataResponse.GeopointData",
  null,
  global
);
goog.exportSymbol("proto.weather.LatLong", null, global);
goog.exportSymbol("proto.weather.Mode", null, global);
goog.exportSymbol("proto.weather.RetrieveSearchTrieDataRequest", null, global);
goog.exportSymbol("proto.weather.RetrieveSearchTrieDataResponse", null, global);
goog.exportSymbol("proto.weather.SearchQueryData", null, global);
goog.exportSymbol("proto.weather.SearchQueryData.Cloud", null, global);
goog.exportSymbol("proto.weather.SearchQueryData.MainData", null, global);
goog.exportSymbol("proto.weather.SearchQueryData.Weather", null, global);
goog.exportSymbol("proto.weather.SearchQueryData.Wind", null, global);
goog.exportSymbol("proto.weather.SearchQueryDataList", null, global);
goog.exportSymbol("proto.weather.SearchQueryDataList.CityData", null, global);
goog.exportSymbol("proto.weather.SearchQueryRequest", null, global);
goog.exportSymbol("proto.weather.SearchQueryResponse", null, global);
goog.exportSymbol("proto.weather.StoreSearchTrieDataRequest", null, global);
goog.exportSymbol("proto.weather.StoreSearchTrieDataResponse", null, global);
goog.exportSymbol("proto.weather.Unit", null, global);
goog.exportSymbol("proto.weather.Void", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.Void = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.Void.displayName = "proto.weather.Void";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.LatLong = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.LatLong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.LatLong.displayName = "proto.weather.LatLong";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryRequest.displayName =
    "proto.weather.SearchQueryRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryData = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.weather.SearchQueryData.repeatedFields_,
    null
  );
};
goog.inherits(proto.weather.SearchQueryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryData.displayName = "proto.weather.SearchQueryData";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryData.Weather = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryData.Weather, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryData.Weather.displayName =
    "proto.weather.SearchQueryData.Weather";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryData.MainData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryData.MainData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryData.MainData.displayName =
    "proto.weather.SearchQueryData.MainData";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryData.Wind = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryData.Wind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryData.Wind.displayName =
    "proto.weather.SearchQueryData.Wind";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryData.Cloud = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryData.Cloud, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryData.Cloud.displayName =
    "proto.weather.SearchQueryData.Cloud";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryDataList = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.weather.SearchQueryDataList.repeatedFields_,
    null
  );
};
goog.inherits(proto.weather.SearchQueryDataList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryDataList.displayName =
    "proto.weather.SearchQueryDataList";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryDataList.CityData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryDataList.CityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryDataList.CityData.displayName =
    "proto.weather.SearchQueryDataList.CityData";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.SearchQueryResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.SearchQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.SearchQueryResponse.displayName =
    "proto.weather.SearchQueryResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.StoreSearchTrieDataRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.weather.StoreSearchTrieDataRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.weather.StoreSearchTrieDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.StoreSearchTrieDataRequest.displayName =
    "proto.weather.StoreSearchTrieDataRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.StoreSearchTrieDataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.StoreSearchTrieDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.StoreSearchTrieDataResponse.displayName =
    "proto.weather.StoreSearchTrieDataResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.RetrieveSearchTrieDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.RetrieveSearchTrieDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.RetrieveSearchTrieDataRequest.displayName =
    "proto.weather.RetrieveSearchTrieDataRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.RetrieveSearchTrieDataResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.weather.RetrieveSearchTrieDataResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.weather.RetrieveSearchTrieDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.RetrieveSearchTrieDataResponse.displayName =
    "proto.weather.RetrieveSearchTrieDataResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.GeopointDataResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.weather.GeopointDataResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.weather.GeopointDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.GeopointDataResponse.displayName =
    "proto.weather.GeopointDataResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.GeopointDataResponse.GeopointData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.GeopointDataResponse.GeopointData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.GeopointDataResponse.GeopointData.displayName =
    "proto.weather.GeopointDataResponse.GeopointData";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.GeopointDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.GeopointDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.GeopointDataRequest.displayName =
    "proto.weather.GeopointDataRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weather.GeopointDataRequest.GeopointQuery = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weather.GeopointDataRequest.GeopointQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weather.GeopointDataRequest.GeopointQuery.displayName =
    "proto.weather.GeopointDataRequest.GeopointQuery";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.Void.prototype.toObject = function (opt_includeInstance) {
    return proto.weather.Void.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.Void} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.Void.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.Void}
 */
proto.weather.Void.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.Void();
  return proto.weather.Void.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.Void}
 */
proto.weather.Void.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.Void.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.Void.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.LatLong.prototype.toObject = function (opt_includeInstance) {
    return proto.weather.LatLong.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.LatLong} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.LatLong.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.LatLong}
 */
proto.weather.LatLong.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.LatLong();
  return proto.weather.LatLong.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.LatLong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.LatLong}
 */
proto.weather.LatLong.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLat(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLon(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.LatLong.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.LatLong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.LatLong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.LatLong.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
};

/**
 * optional float lat = 1;
 * @return {number}
 */
proto.weather.LatLong.prototype.getLat = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.LatLong} returns this
 */
proto.weather.LatLong.prototype.setLat = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional float lon = 2;
 * @return {number}
 */
proto.weather.LatLong.prototype.getLon = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.LatLong} returns this
 */
proto.weather.LatLong.prototype.setLon = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        latLon:
          (f = msg.getLatLon()) &&
          proto.weather.LatLong.toObject(includeInstance, f),
        mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
        unit: jspb.Message.getFieldWithDefault(msg, 3, 0),
        lang: jspb.Message.getFieldWithDefault(msg, 4, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryRequest}
 */
proto.weather.SearchQueryRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryRequest();
  return proto.weather.SearchQueryRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryRequest}
 */
proto.weather.SearchQueryRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.weather.LatLong();
        reader.readMessage(
          value,
          proto.weather.LatLong.deserializeBinaryFromReader
        );
        msg.setLatLon(value);
        break;
      case 2:
        var value = /** @type {!proto.weather.Mode} */ (reader.readEnum());
        msg.setMode(value);
        break;
      case 3:
        var value = /** @type {!proto.weather.Unit} */ (reader.readEnum());
        msg.setUnit(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setLang(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getLatLon();
  if (f != null) {
    writer.writeMessage(1, f, proto.weather.LatLong.serializeBinaryToWriter);
  }
  f = /** @type {!proto.weather.Mode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(2, f);
  }
  f = /** @type {!proto.weather.Unit} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(3, f);
  }
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional LatLong lat_lon = 1;
 * @return {?proto.weather.LatLong}
 */
proto.weather.SearchQueryRequest.prototype.getLatLon = function () {
  return /** @type{?proto.weather.LatLong} */ (
    jspb.Message.getWrapperField(this, proto.weather.LatLong, 1)
  );
};

/**
 * @param {?proto.weather.LatLong|undefined} value
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.setLatLon = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.clearLatLon = function () {
  return this.setLatLon(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryRequest.prototype.hasLatLon = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Mode mode = 2;
 * @return {!proto.weather.Mode}
 */
proto.weather.SearchQueryRequest.prototype.getMode = function () {
  return /** @type {!proto.weather.Mode} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};

/**
 * @param {!proto.weather.Mode} value
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.setMode = function (value) {
  return jspb.Message.setField(this, 2, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.clearMode = function () {
  return jspb.Message.setField(this, 2, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryRequest.prototype.hasMode = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Unit unit = 3;
 * @return {!proto.weather.Unit}
 */
proto.weather.SearchQueryRequest.prototype.getUnit = function () {
  return /** @type {!proto.weather.Unit} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/**
 * @param {!proto.weather.Unit} value
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.setUnit = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.clearUnit = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryRequest.prototype.hasUnit = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string lang = 4;
 * @return {string}
 */
proto.weather.SearchQueryRequest.prototype.getLang = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryRequest} returns this
 */
proto.weather.SearchQueryRequest.prototype.setLang = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weather.SearchQueryData.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryData.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryData.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryData.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        coord:
          (f = msg.getCoord()) &&
          proto.weather.LatLong.toObject(includeInstance, f),
        weatherList: jspb.Message.toObjectList(
          msg.getWeatherList(),
          proto.weather.SearchQueryData.Weather.toObject,
          includeInstance
        ),
        base: jspb.Message.getFieldWithDefault(msg, 3, ""),
        main:
          (f = msg.getMain()) &&
          proto.weather.SearchQueryData.MainData.toObject(includeInstance, f),
        visibility: jspb.Message.getFieldWithDefault(msg, 5, 0),
        wind:
          (f = msg.getWind()) &&
          proto.weather.SearchQueryData.Wind.toObject(includeInstance, f),
        dt: jspb.Message.getFieldWithDefault(msg, 7, 0),
        clouds:
          (f = msg.getClouds()) &&
          proto.weather.SearchQueryData.Cloud.toObject(includeInstance, f),
        dtTxt: jspb.Message.getFieldWithDefault(msg, 9, ""),
        pop: jspb.Message.getFieldWithDefault(msg, 10, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryData}
 */
proto.weather.SearchQueryData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryData();
  return proto.weather.SearchQueryData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryData}
 */
proto.weather.SearchQueryData.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.weather.LatLong();
        reader.readMessage(
          value,
          proto.weather.LatLong.deserializeBinaryFromReader
        );
        msg.setCoord(value);
        break;
      case 2:
        var value = new proto.weather.SearchQueryData.Weather();
        reader.readMessage(
          value,
          proto.weather.SearchQueryData.Weather.deserializeBinaryFromReader
        );
        msg.addWeather(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setBase(value);
        break;
      case 4:
        var value = new proto.weather.SearchQueryData.MainData();
        reader.readMessage(
          value,
          proto.weather.SearchQueryData.MainData.deserializeBinaryFromReader
        );
        msg.setMain(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setVisibility(value);
        break;
      case 6:
        var value = new proto.weather.SearchQueryData.Wind();
        reader.readMessage(
          value,
          proto.weather.SearchQueryData.Wind.deserializeBinaryFromReader
        );
        msg.setWind(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setDt(value);
        break;
      case 8:
        var value = new proto.weather.SearchQueryData.Cloud();
        reader.readMessage(
          value,
          proto.weather.SearchQueryData.Cloud.deserializeBinaryFromReader
        );
        msg.setClouds(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setDtTxt(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPop(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryData.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getCoord();
  if (f != null) {
    writer.writeMessage(1, f, proto.weather.LatLong.serializeBinaryToWriter);
  }
  f = message.getWeatherList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.weather.SearchQueryData.Weather.serializeBinaryToWriter
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMain();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.weather.SearchQueryData.MainData.serializeBinaryToWriter
    );
  }
  f = message.getVisibility();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getWind();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.weather.SearchQueryData.Wind.serializeBinaryToWriter
    );
  }
  f = message.getDt();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = message.getClouds();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.weather.SearchQueryData.Cloud.serializeBinaryToWriter
    );
  }
  f = message.getDtTxt();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getPop();
  if (f !== 0) {
    writer.writeInt32(10, f);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryData.Weather.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryData.Weather.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryData.Weather} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryData.Weather.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        main: jspb.Message.getFieldWithDefault(msg, 2, ""),
        description: jspb.Message.getFieldWithDefault(msg, 3, ""),
        icon: jspb.Message.getFieldWithDefault(msg, 4, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryData.Weather}
 */
proto.weather.SearchQueryData.Weather.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryData.Weather();
  return proto.weather.SearchQueryData.Weather.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryData.Weather} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryData.Weather}
 */
proto.weather.SearchQueryData.Weather.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMain(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setIcon(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryData.Weather.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryData.Weather.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryData.Weather} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryData.Weather.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getMain();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.weather.SearchQueryData.Weather.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.Weather} returns this
 */
proto.weather.SearchQueryData.Weather.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string main = 2;
 * @return {string}
 */
proto.weather.SearchQueryData.Weather.prototype.getMain = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryData.Weather} returns this
 */
proto.weather.SearchQueryData.Weather.prototype.setMain = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string description = 3;
 * @return {string}
 */
proto.weather.SearchQueryData.Weather.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryData.Weather} returns this
 */
proto.weather.SearchQueryData.Weather.prototype.setDescription = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string icon = 4;
 * @return {string}
 */
proto.weather.SearchQueryData.Weather.prototype.getIcon = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryData.Weather} returns this
 */
proto.weather.SearchQueryData.Weather.prototype.setIcon = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryData.MainData.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryData.MainData.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryData.MainData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryData.MainData.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        temp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        tempMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        tempMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        humidity: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
        feelsLike: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
        pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
        seaLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
        grndLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
        tempKf: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryData.MainData}
 */
proto.weather.SearchQueryData.MainData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryData.MainData();
  return proto.weather.SearchQueryData.MainData.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryData.MainData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryData.MainData}
 */
proto.weather.SearchQueryData.MainData.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setTemp(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setTempMin(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setTempMax(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setHumidity(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setFeelsLike(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setPressure(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setSeaLevel(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setGrndLevel(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setTempKf(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryData.MainData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryData.MainData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryData.MainData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryData.MainData.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getTemp();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getTempMin();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getTempMax();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getHumidity();
  if (f !== 0.0) {
    writer.writeFloat(4, f);
  }
  f = message.getFeelsLike();
  if (f !== 0.0) {
    writer.writeFloat(5, f);
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(6, f);
  }
  f = message.getSeaLevel();
  if (f !== 0.0) {
    writer.writeFloat(7, f);
  }
  f = message.getGrndLevel();
  if (f !== 0.0) {
    writer.writeFloat(8, f);
  }
  f = message.getTempKf();
  if (f !== 0.0) {
    writer.writeFloat(9, f);
  }
};

/**
 * optional float temp = 1;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getTemp = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setTemp = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional float temp_min = 2;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getTempMin = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setTempMin = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional float temp_max = 3;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getTempMax = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setTempMax = function (value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional float humidity = 4;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getHumidity = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setHumidity = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional float feels_like = 5;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getFeelsLike = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setFeelsLike = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional float pressure = 6;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getPressure = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setPressure = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * optional float sea_level = 7;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getSeaLevel = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setSeaLevel = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};

/**
 * optional float grnd_level = 8;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getGrndLevel = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setGrndLevel = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};

/**
 * optional float temp_kf = 9;
 * @return {number}
 */
proto.weather.SearchQueryData.MainData.prototype.getTempKf = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.MainData} returns this
 */
proto.weather.SearchQueryData.MainData.prototype.setTempKf = function (value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryData.Wind.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryData.Wind.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryData.Wind} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryData.Wind.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        deg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        gust: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryData.Wind}
 */
proto.weather.SearchQueryData.Wind.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryData.Wind();
  return proto.weather.SearchQueryData.Wind.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryData.Wind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryData.Wind}
 */
proto.weather.SearchQueryData.Wind.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setSpeed(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setDeg(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setGust(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryData.Wind.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryData.Wind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryData.Wind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryData.Wind.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getDeg();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getGust();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
};

/**
 * optional float speed = 1;
 * @return {number}
 */
proto.weather.SearchQueryData.Wind.prototype.getSpeed = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.Wind} returns this
 */
proto.weather.SearchQueryData.Wind.prototype.setSpeed = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional float deg = 2;
 * @return {number}
 */
proto.weather.SearchQueryData.Wind.prototype.getDeg = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.Wind} returns this
 */
proto.weather.SearchQueryData.Wind.prototype.setDeg = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional float gust = 3;
 * @return {number}
 */
proto.weather.SearchQueryData.Wind.prototype.getGust = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData.Wind} returns this
 */
proto.weather.SearchQueryData.Wind.prototype.setGust = function (value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryData.Cloud.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryData.Cloud.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryData.Cloud} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryData.Cloud.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        all: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryData.Cloud}
 */
proto.weather.SearchQueryData.Cloud.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryData.Cloud();
  return proto.weather.SearchQueryData.Cloud.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryData.Cloud} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryData.Cloud}
 */
proto.weather.SearchQueryData.Cloud.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAll(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryData.Cloud.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryData.Cloud.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryData.Cloud} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryData.Cloud.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getAll();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string all = 1;
 * @return {string}
 */
proto.weather.SearchQueryData.Cloud.prototype.getAll = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryData.Cloud} returns this
 */
proto.weather.SearchQueryData.Cloud.prototype.setAll = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional LatLong coord = 1;
 * @return {?proto.weather.LatLong}
 */
proto.weather.SearchQueryData.prototype.getCoord = function () {
  return /** @type{?proto.weather.LatLong} */ (
    jspb.Message.getWrapperField(this, proto.weather.LatLong, 1)
  );
};

/**
 * @param {?proto.weather.LatLong|undefined} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setCoord = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.clearCoord = function () {
  return this.setCoord(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryData.prototype.hasCoord = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated Weather weather = 2;
 * @return {!Array<!proto.weather.SearchQueryData.Weather>}
 */
proto.weather.SearchQueryData.prototype.getWeatherList = function () {
  return /** @type{!Array<!proto.weather.SearchQueryData.Weather>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.weather.SearchQueryData.Weather,
      2
    )
  );
};

/**
 * @param {!Array<!proto.weather.SearchQueryData.Weather>} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setWeatherList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.weather.SearchQueryData.Weather=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weather.SearchQueryData.Weather}
 */
proto.weather.SearchQueryData.prototype.addWeather = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.weather.SearchQueryData.Weather,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.clearWeatherList = function () {
  return this.setWeatherList([]);
};

/**
 * optional string base = 3;
 * @return {string}
 */
proto.weather.SearchQueryData.prototype.getBase = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setBase = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional MainData main = 4;
 * @return {?proto.weather.SearchQueryData.MainData}
 */
proto.weather.SearchQueryData.prototype.getMain = function () {
  return /** @type{?proto.weather.SearchQueryData.MainData} */ (
    jspb.Message.getWrapperField(
      this,
      proto.weather.SearchQueryData.MainData,
      4
    )
  );
};

/**
 * @param {?proto.weather.SearchQueryData.MainData|undefined} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setMain = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.clearMain = function () {
  return this.setMain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryData.prototype.hasMain = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional int64 visibility = 5;
 * @return {number}
 */
proto.weather.SearchQueryData.prototype.getVisibility = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setVisibility = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional Wind wind = 6;
 * @return {?proto.weather.SearchQueryData.Wind}
 */
proto.weather.SearchQueryData.prototype.getWind = function () {
  return /** @type{?proto.weather.SearchQueryData.Wind} */ (
    jspb.Message.getWrapperField(this, proto.weather.SearchQueryData.Wind, 6)
  );
};

/**
 * @param {?proto.weather.SearchQueryData.Wind|undefined} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setWind = function (value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.clearWind = function () {
  return this.setWind(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryData.prototype.hasWind = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional int64 dt = 7;
 * @return {number}
 */
proto.weather.SearchQueryData.prototype.getDt = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setDt = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional Cloud clouds = 8;
 * @return {?proto.weather.SearchQueryData.Cloud}
 */
proto.weather.SearchQueryData.prototype.getClouds = function () {
  return /** @type{?proto.weather.SearchQueryData.Cloud} */ (
    jspb.Message.getWrapperField(this, proto.weather.SearchQueryData.Cloud, 8)
  );
};

/**
 * @param {?proto.weather.SearchQueryData.Cloud|undefined} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setClouds = function (value) {
  return jspb.Message.setWrapperField(this, 8, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.clearClouds = function () {
  return this.setClouds(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryData.prototype.hasClouds = function () {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * optional string dt_txt = 9;
 * @return {string}
 */
proto.weather.SearchQueryData.prototype.getDtTxt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setDtTxt = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional int32 pop = 10;
 * @return {number}
 */
proto.weather.SearchQueryData.prototype.getPop = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryData} returns this
 */
proto.weather.SearchQueryData.prototype.setPop = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weather.SearchQueryDataList.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryDataList.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryDataList.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryDataList} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryDataList.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        cod: jspb.Message.getFieldWithDefault(msg, 1, ""),
        message: jspb.Message.getFieldWithDefault(msg, 2, ""),
        cnt: jspb.Message.getFieldWithDefault(msg, 3, ""),
        listList: jspb.Message.toObjectList(
          msg.getListList(),
          proto.weather.SearchQueryData.toObject,
          includeInstance
        ),
        city:
          (f = msg.getCity()) &&
          proto.weather.SearchQueryDataList.CityData.toObject(
            includeInstance,
            f
          ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryDataList}
 */
proto.weather.SearchQueryDataList.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryDataList();
  return proto.weather.SearchQueryDataList.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryDataList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryDataList}
 */
proto.weather.SearchQueryDataList.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setCod(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setCnt(value);
        break;
      case 4:
        var value = new proto.weather.SearchQueryData();
        reader.readMessage(
          value,
          proto.weather.SearchQueryData.deserializeBinaryFromReader
        );
        msg.addList(value);
        break;
      case 5:
        var value = new proto.weather.SearchQueryDataList.CityData();
        reader.readMessage(
          value,
          proto.weather.SearchQueryDataList.CityData.deserializeBinaryFromReader
        );
        msg.setCity(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryDataList.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryDataList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryDataList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryDataList.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(2, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.weather.SearchQueryData.serializeBinaryToWriter
    );
  }
  f = message.getCity();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.weather.SearchQueryDataList.CityData.serializeBinaryToWriter
    );
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryDataList.CityData.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryDataList.CityData.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryDataList.CityData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryDataList.CityData.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        coordMap: (f = msg.getCoordMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        country: jspb.Message.getFieldWithDefault(msg, 4, ""),
        population: jspb.Message.getFieldWithDefault(msg, 5, 0),
        timezone: jspb.Message.getFieldWithDefault(msg, 6, 0),
        sunrise: jspb.Message.getFieldWithDefault(msg, 7, 0),
        sunset: jspb.Message.getFieldWithDefault(msg, 8, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryDataList.CityData}
 */
proto.weather.SearchQueryDataList.CityData.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryDataList.CityData();
  return proto.weather.SearchQueryDataList.CityData.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryDataList.CityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryDataList.CityData}
 */
proto.weather.SearchQueryDataList.CityData.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        case 3:
          var value = msg.getCoordMap();
          reader.readMessage(value, function (message, reader) {
            jspb.Map.deserializeBinary(
              message,
              reader,
              jspb.BinaryReader.prototype.readString,
              jspb.BinaryReader.prototype.readFloat,
              null,
              "",
              0.0
            );
          });
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setCountry(value);
          break;
        case 5:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setPopulation(value);
          break;
        case 6:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setTimezone(value);
          break;
        case 7:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setSunrise(value);
          break;
        case 8:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setSunset(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryDataList.CityData.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.SearchQueryDataList.CityData.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryDataList.CityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryDataList.CityData.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getCoordMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeFloat
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getPopulation();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getTimezone();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getSunrise();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = message.getSunset();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setName = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * map<string, float> coord = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getCoordMap = function (
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,number>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.clearCoordMap =
  function () {
    this.getCoordMap().clear();
    return this;
  };

/**
 * optional string country = 4;
 * @return {string}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getCountry = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setCountry = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 population = 5;
 * @return {number}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getPopulation =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
  };

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setPopulation = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 timezone = 6;
 * @return {number}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getTimezone = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setTimezone = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int64 sunrise = 7;
 * @return {number}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getSunrise = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setSunrise = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int64 sunset = 8;
 * @return {number}
 */
proto.weather.SearchQueryDataList.CityData.prototype.getSunset = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryDataList.CityData} returns this
 */
proto.weather.SearchQueryDataList.CityData.prototype.setSunset = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional string cod = 1;
 * @return {string}
 */
proto.weather.SearchQueryDataList.prototype.getCod = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.setCod = function (value) {
  return jspb.Message.setField(this, 1, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.clearCod = function () {
  return jspb.Message.setField(this, 1, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryDataList.prototype.hasCod = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.weather.SearchQueryDataList.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.setMessage = function (value) {
  return jspb.Message.setField(this, 2, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.clearMessage = function () {
  return jspb.Message.setField(this, 2, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryDataList.prototype.hasMessage = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string cnt = 3;
 * @return {string}
 */
proto.weather.SearchQueryDataList.prototype.getCnt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.setCnt = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.clearCnt = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryDataList.prototype.hasCnt = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * repeated SearchQueryData list = 4;
 * @return {!Array<!proto.weather.SearchQueryData>}
 */
proto.weather.SearchQueryDataList.prototype.getListList = function () {
  return /** @type{!Array<!proto.weather.SearchQueryData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.weather.SearchQueryData, 4)
  );
};

/**
 * @param {!Array<!proto.weather.SearchQueryData>} value
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.setListList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.weather.SearchQueryData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weather.SearchQueryData}
 */
proto.weather.SearchQueryDataList.prototype.addList = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.weather.SearchQueryData,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.clearListList = function () {
  return this.setListList([]);
};

/**
 * optional CityData city = 5;
 * @return {?proto.weather.SearchQueryDataList.CityData}
 */
proto.weather.SearchQueryDataList.prototype.getCity = function () {
  return /** @type{?proto.weather.SearchQueryDataList.CityData} */ (
    jspb.Message.getWrapperField(
      this,
      proto.weather.SearchQueryDataList.CityData,
      5
    )
  );
};

/**
 * @param {?proto.weather.SearchQueryDataList.CityData|undefined} value
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.setCity = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryDataList} returns this
 */
proto.weather.SearchQueryDataList.prototype.clearCity = function () {
  return this.setCity(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryDataList.prototype.hasCity = function () {
  return jspb.Message.getField(this, 5) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.SearchQueryResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.SearchQueryResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.SearchQueryResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.SearchQueryResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        message: jspb.Message.getFieldWithDefault(msg, 2, ""),
        data:
          (f = msg.getData()) &&
          proto.weather.SearchQueryDataList.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.SearchQueryResponse}
 */
proto.weather.SearchQueryResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.SearchQueryResponse();
  return proto.weather.SearchQueryResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.SearchQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.SearchQueryResponse}
 */
proto.weather.SearchQueryResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.weather.SearchQueryDataList();
        reader.readMessage(
          value,
          proto.weather.SearchQueryDataList.deserializeBinaryFromReader
        );
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.SearchQueryResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.SearchQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.SearchQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.SearchQueryResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(2, f);
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.weather.SearchQueryDataList.serializeBinaryToWriter
    );
  }
};

/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.weather.SearchQueryResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.SearchQueryResponse} returns this
 */
proto.weather.SearchQueryResponse.prototype.setCode = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.weather.SearchQueryResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.SearchQueryResponse} returns this
 */
proto.weather.SearchQueryResponse.prototype.setMessage = function (value) {
  return jspb.Message.setField(this, 2, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.SearchQueryResponse} returns this
 */
proto.weather.SearchQueryResponse.prototype.clearMessage = function () {
  return jspb.Message.setField(this, 2, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryResponse.prototype.hasMessage = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional SearchQueryDataList data = 3;
 * @return {?proto.weather.SearchQueryDataList}
 */
proto.weather.SearchQueryResponse.prototype.getData = function () {
  return /** @type{?proto.weather.SearchQueryDataList} */ (
    jspb.Message.getWrapperField(this, proto.weather.SearchQueryDataList, 3)
  );
};

/**
 * @param {?proto.weather.SearchQueryDataList|undefined} value
 * @return {!proto.weather.SearchQueryResponse} returns this
 */
proto.weather.SearchQueryResponse.prototype.setData = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.SearchQueryResponse} returns this
 */
proto.weather.SearchQueryResponse.prototype.clearData = function () {
  return this.setData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.SearchQueryResponse.prototype.hasData = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weather.StoreSearchTrieDataRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.StoreSearchTrieDataRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.StoreSearchTrieDataRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.StoreSearchTrieDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.StoreSearchTrieDataRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        trieDataList:
          (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.StoreSearchTrieDataRequest}
 */
proto.weather.StoreSearchTrieDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.StoreSearchTrieDataRequest();
  return proto.weather.StoreSearchTrieDataRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.StoreSearchTrieDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.StoreSearchTrieDataRequest}
 */
proto.weather.StoreSearchTrieDataRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.addTrieData(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.StoreSearchTrieDataRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.StoreSearchTrieDataRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.StoreSearchTrieDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.StoreSearchTrieDataRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTrieDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.weather.StoreSearchTrieDataRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.StoreSearchTrieDataRequest} returns this
 */
proto.weather.StoreSearchTrieDataRequest.prototype.setUserId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated string trie_data = 2;
 * @return {!Array<string>}
 */
proto.weather.StoreSearchTrieDataRequest.prototype.getTrieDataList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 2)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.weather.StoreSearchTrieDataRequest} returns this
 */
proto.weather.StoreSearchTrieDataRequest.prototype.setTrieDataList = function (
  value
) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weather.StoreSearchTrieDataRequest} returns this
 */
proto.weather.StoreSearchTrieDataRequest.prototype.addTrieData = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weather.StoreSearchTrieDataRequest} returns this
 */
proto.weather.StoreSearchTrieDataRequest.prototype.clearTrieDataList =
  function () {
    return this.setTrieDataList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.StoreSearchTrieDataResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.StoreSearchTrieDataResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.StoreSearchTrieDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.StoreSearchTrieDataResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        message: jspb.Message.getFieldWithDefault(msg, 2, ""),
        error: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.StoreSearchTrieDataResponse}
 */
proto.weather.StoreSearchTrieDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.StoreSearchTrieDataResponse();
  return proto.weather.StoreSearchTrieDataResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.StoreSearchTrieDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.StoreSearchTrieDataResponse}
 */
proto.weather.StoreSearchTrieDataResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setCode(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setMessage(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setError(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.StoreSearchTrieDataResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.StoreSearchTrieDataResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.StoreSearchTrieDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.StoreSearchTrieDataResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
};

/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.weather.StoreSearchTrieDataResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.StoreSearchTrieDataResponse} returns this
 */
proto.weather.StoreSearchTrieDataResponse.prototype.setCode = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.weather.StoreSearchTrieDataResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.StoreSearchTrieDataResponse} returns this
 */
proto.weather.StoreSearchTrieDataResponse.prototype.setMessage = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string error = 3;
 * @return {string}
 */
proto.weather.StoreSearchTrieDataResponse.prototype.getError = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.StoreSearchTrieDataResponse} returns this
 */
proto.weather.StoreSearchTrieDataResponse.prototype.setError = function (
  value
) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.StoreSearchTrieDataResponse} returns this
 */
proto.weather.StoreSearchTrieDataResponse.prototype.clearError = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.StoreSearchTrieDataResponse.prototype.hasError = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.RetrieveSearchTrieDataRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.RetrieveSearchTrieDataRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.RetrieveSearchTrieDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.RetrieveSearchTrieDataRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.RetrieveSearchTrieDataRequest}
 */
proto.weather.RetrieveSearchTrieDataRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.RetrieveSearchTrieDataRequest();
  return proto.weather.RetrieveSearchTrieDataRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.RetrieveSearchTrieDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.RetrieveSearchTrieDataRequest}
 */
proto.weather.RetrieveSearchTrieDataRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.RetrieveSearchTrieDataRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.RetrieveSearchTrieDataRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.RetrieveSearchTrieDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.RetrieveSearchTrieDataRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.weather.RetrieveSearchTrieDataRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.RetrieveSearchTrieDataRequest} returns this
 */
proto.weather.RetrieveSearchTrieDataRequest.prototype.setUserId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weather.RetrieveSearchTrieDataResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.RetrieveSearchTrieDataResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.RetrieveSearchTrieDataResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.RetrieveSearchTrieDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.RetrieveSearchTrieDataResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        message: jspb.Message.getFieldWithDefault(msg, 2, ""),
        trieDataList:
          (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
        error: jspb.Message.getFieldWithDefault(msg, 4, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.RetrieveSearchTrieDataResponse}
 */
proto.weather.RetrieveSearchTrieDataResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.RetrieveSearchTrieDataResponse();
  return proto.weather.RetrieveSearchTrieDataResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.RetrieveSearchTrieDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.RetrieveSearchTrieDataResponse}
 */
proto.weather.RetrieveSearchTrieDataResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt32());
          msg.setCode(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setMessage(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.addTrieData(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setError(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.RetrieveSearchTrieDataResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.RetrieveSearchTrieDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.RetrieveSearchTrieDataResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCode();
    if (f !== 0) {
      writer.writeInt32(1, f);
    }
    f = message.getMessage();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getTrieDataList();
    if (f.length > 0) {
      writer.writeRepeatedString(3, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 4));
    if (f != null) {
      writer.writeString(4, f);
    }
  };

/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.setCode = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.getMessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.setMessage = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated string trie_data = 3;
 * @return {!Array<string>}
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.getTrieDataList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 3)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.setTrieDataList =
  function (value) {
    return jspb.Message.setField(this, 3, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.addTrieData = function (
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.clearTrieDataList =
  function () {
    return this.setTrieDataList([]);
  };

/**
 * optional string error = 4;
 * @return {string}
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.getError = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.setError = function (
  value
) {
  return jspb.Message.setField(this, 4, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.RetrieveSearchTrieDataResponse} returns this
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.clearError =
  function () {
    return jspb.Message.setField(this, 4, undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.RetrieveSearchTrieDataResponse.prototype.hasError = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weather.GeopointDataResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.GeopointDataResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.GeopointDataResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.GeopointDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.GeopointDataResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        message: jspb.Message.getFieldWithDefault(msg, 2, ""),
        dataList: jspb.Message.toObjectList(
          msg.getDataList(),
          proto.weather.GeopointDataResponse.GeopointData.toObject,
          includeInstance
        ),
        error: jspb.Message.getFieldWithDefault(msg, 4, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.GeopointDataResponse}
 */
proto.weather.GeopointDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.GeopointDataResponse();
  return proto.weather.GeopointDataResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.GeopointDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.GeopointDataResponse}
 */
proto.weather.GeopointDataResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = new proto.weather.GeopointDataResponse.GeopointData();
        reader.readMessage(
          value,
          proto.weather.GeopointDataResponse.GeopointData
            .deserializeBinaryFromReader
        );
        msg.addData(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setError(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.GeopointDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.GeopointDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.GeopointDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.GeopointDataResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.weather.GeopointDataResponse.GeopointData.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(4, f);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.GeopointDataResponse.GeopointData.prototype.toObject =
    function (opt_includeInstance) {
      return proto.weather.GeopointDataResponse.GeopointData.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.GeopointDataResponse.GeopointData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.GeopointDataResponse.GeopointData.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        localNamesMap: (f = msg.getLocalNamesMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
        country: jspb.Message.getFieldWithDefault(msg, 5, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.GeopointDataResponse.GeopointData}
 */
proto.weather.GeopointDataResponse.GeopointData.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.GeopointDataResponse.GeopointData();
  return proto.weather.GeopointDataResponse.GeopointData.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.GeopointDataResponse.GeopointData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.GeopointDataResponse.GeopointData}
 */
proto.weather.GeopointDataResponse.GeopointData.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        case 2:
          var value = msg.getLocalNamesMap();
          reader.readMessage(value, function (message, reader) {
            jspb.Map.deserializeBinary(
              message,
              reader,
              jspb.BinaryReader.prototype.readString,
              jspb.BinaryReader.prototype.readString,
              null,
              "",
              ""
            );
          });
          break;
        case 3:
          var value = /** @type {number} */ (reader.readFloat());
          msg.setLat(value);
          break;
        case 4:
          var value = /** @type {number} */ (reader.readFloat());
          msg.setLon(value);
          break;
        case 5:
          var value = /** @type {string} */ (reader.readString());
          msg.setCountry(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.GeopointDataResponse.GeopointData.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.GeopointDataResponse.GeopointData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.GeopointDataResponse.GeopointData.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getLocalNamesMap(true);
    if (f && f.getLength() > 0) {
      f.serializeBinary(
        2,
        writer,
        jspb.BinaryWriter.prototype.writeString,
        jspb.BinaryWriter.prototype.writeString
      );
    }
    f = message.getLat();
    if (f !== 0.0) {
      writer.writeFloat(3, f);
    }
    f = message.getLon();
    if (f !== 0.0) {
      writer.writeFloat(4, f);
    }
    f = message.getCountry();
    if (f.length > 0) {
      writer.writeString(5, f);
    }
  };

/**
 * optional string name = 1;
 * @return {string}
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.getName =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataResponse.GeopointData} returns this
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.setName = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * map<string, string> local_names = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.getLocalNamesMap =
  function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate, null)
    );
  };

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.weather.GeopointDataResponse.GeopointData} returns this
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.clearLocalNamesMap =
  function () {
    this.getLocalNamesMap().clear();
    return this;
  };

/**
 * optional float lat = 3;
 * @return {number}
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.getLat = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.GeopointDataResponse.GeopointData} returns this
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.setLat = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional float lon = 4;
 * @return {number}
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.getLon = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.weather.GeopointDataResponse.GeopointData} returns this
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.setLon = function (
  value
) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional string country = 5;
 * @return {string}
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.getCountry =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 5, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataResponse.GeopointData} returns this
 */
proto.weather.GeopointDataResponse.GeopointData.prototype.setCountry =
  function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
  };

/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.weather.GeopointDataResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.GeopointDataResponse} returns this
 */
proto.weather.GeopointDataResponse.prototype.setCode = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.weather.GeopointDataResponse.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataResponse} returns this
 */
proto.weather.GeopointDataResponse.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated GeopointData data = 3;
 * @return {!Array<!proto.weather.GeopointDataResponse.GeopointData>}
 */
proto.weather.GeopointDataResponse.prototype.getDataList = function () {
  return /** @type{!Array<!proto.weather.GeopointDataResponse.GeopointData>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.weather.GeopointDataResponse.GeopointData,
      3
    )
  );
};

/**
 * @param {!Array<!proto.weather.GeopointDataResponse.GeopointData>} value
 * @return {!proto.weather.GeopointDataResponse} returns this
 */
proto.weather.GeopointDataResponse.prototype.setDataList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.weather.GeopointDataResponse.GeopointData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weather.GeopointDataResponse.GeopointData}
 */
proto.weather.GeopointDataResponse.prototype.addData = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.weather.GeopointDataResponse.GeopointData,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weather.GeopointDataResponse} returns this
 */
proto.weather.GeopointDataResponse.prototype.clearDataList = function () {
  return this.setDataList([]);
};

/**
 * optional string error = 4;
 * @return {string}
 */
proto.weather.GeopointDataResponse.prototype.getError = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataResponse} returns this
 */
proto.weather.GeopointDataResponse.prototype.setError = function (value) {
  return jspb.Message.setField(this, 4, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.GeopointDataResponse} returns this
 */
proto.weather.GeopointDataResponse.prototype.clearError = function () {
  return jspb.Message.setField(this, 4, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.GeopointDataResponse.prototype.hasError = function () {
  return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.GeopointDataRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.weather.GeopointDataRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.GeopointDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.GeopointDataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
        q:
          (f = msg.getQ()) &&
          proto.weather.GeopointDataRequest.GeopointQuery.toObject(
            includeInstance,
            f
          ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.GeopointDataRequest}
 */
proto.weather.GeopointDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.GeopointDataRequest();
  return proto.weather.GeopointDataRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.GeopointDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.GeopointDataRequest}
 */
proto.weather.GeopointDataRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      case 3:
        var value = new proto.weather.GeopointDataRequest.GeopointQuery();
        reader.readMessage(
          value,
          proto.weather.GeopointDataRequest.GeopointQuery
            .deserializeBinaryFromReader
        );
        msg.setQ(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.GeopointDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.weather.GeopointDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.GeopointDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.GeopointDataRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(1, f);
  }
  f = message.getQ();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.weather.GeopointDataRequest.GeopointQuery.serializeBinaryToWriter
    );
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.weather.GeopointDataRequest.GeopointQuery.prototype.toObject =
    function (opt_includeInstance) {
      return proto.weather.GeopointDataRequest.GeopointQuery.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.weather.GeopointDataRequest.GeopointQuery} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.weather.GeopointDataRequest.GeopointQuery.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        cityName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        stateCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
        countryCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery}
 */
proto.weather.GeopointDataRequest.GeopointQuery.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weather.GeopointDataRequest.GeopointQuery();
  return proto.weather.GeopointDataRequest.GeopointQuery.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weather.GeopointDataRequest.GeopointQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery}
 */
proto.weather.GeopointDataRequest.GeopointQuery.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setCityName(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setStateCode(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setCountryCode(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.weather.GeopointDataRequest.GeopointQuery.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weather.GeopointDataRequest.GeopointQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weather.GeopointDataRequest.GeopointQuery.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = /** @type {string} */ (jspb.Message.getField(message, 1));
    if (f != null) {
      writer.writeString(1, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 2));
    if (f != null) {
      writer.writeString(2, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 3));
    if (f != null) {
      writer.writeString(3, f);
    }
  };

/**
 * optional string city_name = 1;
 * @return {string}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.getCityName =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery} returns this
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.setCityName =
  function (value) {
    return jspb.Message.setField(this, 1, value);
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery} returns this
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.clearCityName =
  function () {
    return jspb.Message.setField(this, 1, undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.hasCityName =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string state_code = 2;
 * @return {string}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.getStateCode =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery} returns this
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.setStateCode =
  function (value) {
    return jspb.Message.setField(this, 2, value);
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery} returns this
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.clearStateCode =
  function () {
    return jspb.Message.setField(this, 2, undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.hasStateCode =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

/**
 * optional string country_code = 3;
 * @return {string}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.getCountryCode =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, "")
    );
  };

/**
 * @param {string} value
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery} returns this
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.setCountryCode =
  function (value) {
    return jspb.Message.setField(this, 3, value);
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.GeopointDataRequest.GeopointQuery} returns this
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.clearCountryCode =
  function () {
    return jspb.Message.setField(this, 3, undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.GeopointDataRequest.GeopointQuery.prototype.hasCountryCode =
  function () {
    return jspb.Message.getField(this, 3) != null;
  };

/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.weather.GeopointDataRequest.prototype.getLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.weather.GeopointDataRequest} returns this
 */
proto.weather.GeopointDataRequest.prototype.setLimit = function (value) {
  return jspb.Message.setField(this, 1, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.weather.GeopointDataRequest} returns this
 */
proto.weather.GeopointDataRequest.prototype.clearLimit = function () {
  return jspb.Message.setField(this, 1, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.GeopointDataRequest.prototype.hasLimit = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional GeopointQuery q = 3;
 * @return {?proto.weather.GeopointDataRequest.GeopointQuery}
 */
proto.weather.GeopointDataRequest.prototype.getQ = function () {
  return /** @type{?proto.weather.GeopointDataRequest.GeopointQuery} */ (
    jspb.Message.getWrapperField(
      this,
      proto.weather.GeopointDataRequest.GeopointQuery,
      3
    )
  );
};

/**
 * @param {?proto.weather.GeopointDataRequest.GeopointQuery|undefined} value
 * @return {!proto.weather.GeopointDataRequest} returns this
 */
proto.weather.GeopointDataRequest.prototype.setQ = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.weather.GeopointDataRequest} returns this
 */
proto.weather.GeopointDataRequest.prototype.clearQ = function () {
  return this.setQ(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weather.GeopointDataRequest.prototype.hasQ = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * @enum {number}
 */
proto.weather.Mode = {
  XML: 0,
  JSON: 1,
  HTML: 2,
};

/**
 * @enum {number}
 */
proto.weather.Unit = {
  STANDARD: 0,
  METRIC: 1,
  IMPERIAL: 2,
};

goog.object.extend(exports, proto.weather);
